apiVersion: v1
kind: ConfigMap
metadata:
  name: python-app-config
  namespace: vaibhav-redis
data:
  app.py: |
    import time
    import logging
    import random
    import traceback
    from datetime import datetime

    # Configure logging with consistent timestamp format
    logging.basicConfig(
        level=logging.ERROR,
        format='%(asctime)s %(levelname)s %(message)s',
        datefmt='%Y-%m-%dT%H:%M:%S%z'
    )

    def emit_error():
        error_types = ['ZeroDivisionError', 'AttributeError', 'ValueError', 'TypeError']
        error = random.choice(error_types)
        
        try:
            if error == 'ZeroDivisionError':
                1 / 0
            elif error == 'AttributeError':
                None.some_attribute
            elif error == 'ValueError':
                int("invalid")
            elif error == 'TypeError':
                len(5)
        except Exception as e:
            logging.error("An error occurred: %s\n%s", e, traceback.format_exc())

    def main():
        while True:
            emit_error()
            time.sleep(60)

    if __name__ == "__main__":
        main()

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-app
  namespace: vaibhav-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: python-app
  template:
    metadata:
      labels:
        kapstan/application_id: 4e69ca0a-16fc-4c95-bad9-f01ca5ffce8b
        kapstan/container_type: CONTAINER_TYPE_DEPLOYMENT_MAIN
        kapstan/deployment_id: 293637bd-e7a8-4be2-8ad0-85baafbd987b
        kapstan/workspace_id: f09f1d0a-fc8c-450f-9150-5cba22df4b84
        app: python-app
    spec:
      containers:
      - name: python-container
        image: python:3.11-alpine
        command: ["sh", "-c", "python /scripts/app.py"]
        volumeMounts:
        - name: python-scripts
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: python-scripts
        configMap:
          name: python-app-config

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: ruby-app-config
  namespace: vaibhav-redis
data:
  app.rb: |
    require 'logger'

    # Configure logger with consistent timestamp format
    logger = Logger.new(STDERR)
    # Remove the datetime_format as it is not used with a custom formatter
    # logger.datetime_format = '%Y-%m-%dT%H:%M:%S%z'

    # Define a custom formatter proc with explicit datetime formatting
    logger.formatter = proc do |severity, datetime, progname, msg|
      "#{datetime.strftime('%Y-%m-%dT%H:%M:%S%z')} #{severity} #{msg}\n"
    end

    def emit_error(logger)
      error_types = ['NoMethodError', 'TypeError', 'ArgumentError', 'RuntimeError']
      error = error_types.sample

      begin
        case error
        when 'NoMethodError'
          nil.some_method
        when 'TypeError'
          "string" + 5
        when 'ArgumentError'
          Integer("invalid")
        when 'RuntimeError'
          raise "Generic runtime error"
        end
      rescue => e
        logger.error("An error occurred: #{e}\n#{e.backtrace.join("\n")}")
      end
    end

    loop do
      emit_error(logger)
      sleep 60
    end

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ruby-app
  namespace: vaibhav-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ruby-app
  template:
    metadata:
      labels:
        kapstan/application_id: 4e69ca0a-16fc-4c95-bad9-f01ca5ffce8b
        kapstan/container_type: CONTAINER_TYPE_DEPLOYMENT_MAIN
        kapstan/deployment_id: 293637bd-e7a8-4be2-8ad0-85baafbd987b
        kapstan/workspace_id: f09f1d0a-fc8c-450f-9150-5cba22df4b84
        app: ruby-app
    spec:
      containers:
      - name: ruby-container
        image: ruby:3.3-alpine
        command: ["sh", "-c", "ruby /scripts/app.rb"]
        volumeMounts:
        - name: ruby-scripts
          mountPath: /scripts
          readOnly: true
      volumes:
      - name: ruby-scripts
        configMap:
          name: ruby-app-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: java-app-config
  namespace: vaibhav-redis
data:
  StackEmitter.java: |
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Properties;
    import java.util.logging.*;

    public class StackEmitter {
        private static final Logger logger = Logger.getLogger(StackEmitter.class.getName());

        public static void main(String[] args) {
            // Configure Logger
            System.setProperty("java.util.logging.SimpleFormatter.format","%1$tFT%1$tT%1$tz %4$s %5$s%6$s%n");
            Logger rootLogger = Logger.getLogger("");
            Handler[] handlers = rootLogger.getHandlers();
            if (handlers[0] instanceof ConsoleHandler) {
                handlers[0].setLevel(Level.INFO);
            }
            logger.setLevel(Level.INFO);

            // Load Configuration
            Properties properties = new Properties();
            try (FileInputStream fis = new FileInputStream("/app/config.properties")) {
                properties.load(fis);
            } catch (IOException e) {
                logger.log(Level.SEVERE, "Failed to load configuration file.", e);
                System.exit(1);
            }

            // Get Interval
            int intervalSeconds = 60; // Default interval
            String intervalStr = properties.getProperty("interval_seconds");
            if (intervalStr != null) {
                try {
                    intervalSeconds = Integer.parseInt(intervalStr);
                } catch (NumberFormatException e) {
                    logger.warning("Invalid interval_seconds value. Using default 60 seconds.");
                }
            }

            // Get Exception Types
            String exceptionsStr = properties.getProperty("exception_types");
            List<String> exceptionTypes = Arrays.asList();
            if (exceptionsStr != null && !exceptionsStr.trim().isEmpty()) {
                exceptionTypes = Arrays.asList(exceptionsStr.split(","));
            }

            if (exceptionTypes.isEmpty()) {
                logger.warning("No exception types found in configuration.");
                System.exit(1);
            }

            logger.info("Starting stack emitter with interval " + intervalSeconds + " seconds.");

            while (true) {
                for (int i = 0; i < exceptionTypes.size(); i++) {
                    String exceptionType = exceptionTypes.get(i).trim();
                    logger.info("Emitting stack trace #" + (i + 1) + " (" + exceptionType + ")");
                    try {
                        throwException(exceptionType);
                    } catch (Exception e) {
                        logger.log(Level.SEVERE, "Emitted Stack Trace:", e);
                    }
                }
                try {
                    Thread.sleep(intervalSeconds * 1000L);
                } catch (InterruptedException e) {
                    logger.log(Level.WARNING, "Stack emitter interrupted.", e);
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }

        private static void throwException(String exceptionType) throws Exception {
            switch (exceptionType) {
                case "NullPointerException":
                    simulateNullPointerException();
                    break;
                case "IllegalArgumentException":
                    simulateIllegalArgumentException();
                    break;
                case "IndexOutOfBoundsException":
                    simulateIndexOutOfBoundsException();
                    break;
                case "ArithmeticException":
                    simulateArithmeticException();
                    break;
                case "ClassNotFoundException":
                    simulateClassNotFoundException();
                    break;
                case "IOException":
                    simulateIOException();
                    break;
                case "NumberFormatException":
                    simulateNumberFormatException();
                    break;
                default:
                    logger.warning("Unsupported exception type: " + exceptionType);
            }
        }

        private static void simulateNullPointerException() {
            String str = null;
            // This will throw NullPointerException
            str.length();
        }

        private static void simulateIllegalArgumentException() {
            // This will throw IllegalArgumentException
            throw new IllegalArgumentException("Simulated IllegalArgumentException");
        }

        private static void simulateIndexOutOfBoundsException() {
            int[] arr = new int[3];
            // This will throw IndexOutOfBoundsException
            int num = arr[5];
        }

        private static void simulateArithmeticException() {
            // This will throw ArithmeticException
            int result = 10 / 0;
        }

        private static void simulateClassNotFoundException() throws ClassNotFoundException {
            // This will throw ClassNotFoundException
            Class.forName("com.nonexistent.ClassName");
        }

        private static void simulateIOException() throws IOException {
            // This will throw IOException
            throw new IOException("Simulated IOException");
        }

        private static void simulateNumberFormatException() {
            // This will throw NumberFormatException
            Integer.parseInt("not_a_number");
        }
    }

  config.properties: |
    # Emission interval in seconds
    interval_seconds=60

    # Comma-separated list of exception types to emit
    exception_types=NullPointerException,IllegalArgumentException,IndexOutOfBoundsException,ArithmeticException,ClassNotFoundException,IOException,NumberFormatException

--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-app
  namespace: vaibhav-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: java-app
  template:
    metadata:
      labels:
        kapstan/application_id: 4e69ca0a-16fc-4c95-bad9-f01ca5ffce8b
        kapstan/container_type: CONTAINER_TYPE_DEPLOYMENT_MAIN
        kapstan/deployment_id: 293637bd-e7a8-4be2-8ad0-85baafbd987b
        kapstan/workspace_id: f09f1d0a-fc8c-450f-9150-5cba22df4b84
        app: java-app
    spec:
      containers:
        - name: java-app
          image: openjdk:17
          command: ["/bin/sh"]
          args:
            - -c
            - |
              # Create application directory
              mkdir -p /app && \
              # Copy Java source code and config from mounted volume
              cp /config/StackEmitter.java /app/ && \
              cp /config/config.properties /app/ && \
              # Navigate to application directory
              cd /app && \
              # Compile Java source code
              javac StackEmitter.java && \
              # Run the Java application
              java StackEmitter
          volumeMounts:
            - name: config-volume
              mountPath: /config
              readOnly: true
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
      volumes:
        - name: config-volume
          configMap:
            name: java-app-config
